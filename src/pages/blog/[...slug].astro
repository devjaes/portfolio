---
import { type CollectionEntry, getCollection } from "astro:content";

import BaseLayout from "../../layouts/BaseLayout.astro";

import ContactCTA from "../../components/ContactCTA.astro";
import Hero from "../../components/Hero.astro";
import Icon from "../../components/Icon.astro";
import Pill from "../../components/Pill.astro";
import FormattedDate from "../../components/FormattedDate.astro";

interface Props {
  entry: CollectionEntry<"blog">;
}

// This is a dynamic route that generates a page for every Markdown file in src/content/
// Read more about dynamic routes and this `getStaticPaths` function in the Astro docs:
// https://docs.astro.build/en/core-concepts/routing/#dynamic-routes
export async function getStaticPaths() {
  const blog = await getCollection("blog");
  return blog.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();
---

<BaseLayout title={entry.data.title} description={entry.data.description}>
  <div class="stack gap-20">
    <div class="stack gap-15">
      <header>
        <div class="wrapper stack gap-2">
          <a class="back-link" href="/blog/"><Icon icon="arrow-left" /> Blog</a>
          <Hero title={entry.data.title} align="start">
            <div class="details">
              <div class="tags">
                {entry.data.tags?.map((t: any) => <Pill>{t}</Pill>)}
              </div>
              <p class="description">{entry.data.description}</p>
            </div>
          </Hero>
        </div>
      </header>
      <main class="wrapper">
        <div class="stack gap-10 content">
          {
            entry.data.heroImage && (
              <div class="hero-image">
                <img src={entry.data.heroImage} alt={entry.data.title || ""} />
              </div>
            )
          }
          <div class="date">
            <FormattedDate date={entry.data.pubDate} />
            {
              entry.data.updatedDate && (
                <span class="last-updated-on">
                  {" "}
                  (last updated on {entry.data.updatedDate})
                </span>
              )
            }
            <div class="content">
              <div class="prose">
                <div class="title">
                  <Content />
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
      <ContactCTA />
    </div>
  </div>

  <style is:inline>
    header {
      padding-bottom: 2.5rem;
      border-bottom: 1px solid var(--gray-800);
    }

    .back-link {
      display: none;
    }

    .details {
      display: flex;
      flex-direction: column;
      padding: 0.5rem;
      gap: 1.5rem;
      justify-content: space-between;
      align-items: center;
    }

    .tags {
      display: flex;
      gap: 0.5rem;
    }

    .description {
      font-size: var(--text-lg);
      max-width: 54ch;
    }

    .content {
      max-width: 75ch;
      margin-inline: auto;
      font-size: var(--text-lg);
    }
    .content :global(h1),
    .content :global(h2),
    .content :global(h3),
    .content :global(h4),
    .content :global(h5) {
      margin: 1.5rem 0;
    }

    .content :global(img) {
      border-radius: 1.5rem;
      box-shadow: var(--shadow-sm);
      background: var(--gradient-subtle);
      border: 1px solid var(--gray-800);
    }

    .content :global(blockquote) {
      font-size: var(--text-lg);
      font-family: var(--font-brand);
      font-weight: 600;
      line-height: 1.1;
      padding-inline-start: 1.5rem;
      border-inline-start: 0.25rem solid var(--accent-dark);
      color: var(--gray-0);
    }

    .back-link,
    .content :global(a) {
      text-decoration: 1px solid underline transparent;
      text-underline-offset: 0.25em;
      transition: text-decoration-color var(--theme-transition);
    }

    .back-link:hover,
    .back-link:focus,
    .content :global(a:hover),
    .content :global(a:focus) {
      text-decoration-color: currentColor;
    }

    .content > :global(* + *) {
      margin-top: 1rem;
    }

    .hero-image {
      width: 100%;
    }

    .hero-image img {
      display: block;
      margin: 0 auto;
      border-radius: 12px;
      box-shadow: var(--box-shadow);
    }

    .prose:root.theme-dark {
      width: 720px;
      max-width: calc(100% - 2em);
      margin: auto;
      padding: 1em;
    }

    .prose {
      width: 720px;
      max-width: calc(100% - 2em);
      margin: auto;
      padding: 1em;
    }

    .date {
      margin-bottom: 0.5em;
      color: rgb(var(--gray));
    }
    .last-updated-on {
      font-style: italic;
    }

    .prose h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
      margin: 35px 0;
      padding: 0;
    }

    .prose h1 {
      font-size: 2.5rem;
      font-weight: 700;
      line-height: 1.2;
    }

    .prose h2 {
      font-size: 2rem;
      font-weight: 700;
      line-height: 1.2;
    }

    .prose h3 {
      font-size: 1.75rem;
      font-weight: 700;
      line-height: 1.2;
    }

    .prose h4 {
      font-size: 1.5rem;
      font-weight: 700;
      line-height: 1.2;
    }

    .prose ul {
      list-style: disc;
      padding-left: 1.5em;
    }

    .prose ul > li {
      margin-bottom: 0.5em;
    }

    .prose ol > ul {
      margin-bottom: 0;
      padding-left: 3rem;
    }

    .prose ol {
      list-style: decimal;
      padding-left: 1.5em;
      margin-bottom: 0 !important;
    }

    .prose a {
      text-decoration: none;
    }

    .prose a:hover {
      text-decoration: underline;
    }

    .prose p {
      margin-bottom: 1em;
    }

    .prose li {
      margin-bottom: 0.5em;
    }

    .prose pre {
      font-size: 0.9em;
      padding: 20px;
      margin: 15px 0;
      border-radius: 10px;
    }

    .prose table th {
      border-width: thin;
    }

    .prose table thead {
      background-color: lightgrey;
    }

    .prose p code {
      /* font-size: inherit; */
      border-radius: 5px;
      background-color: #e5e9f0a8;
      color: black;
      font-weight: bold;
    }

    @media (max-width: 720px) {
      .prose {
        max-width: 100%;
        width: 100%;
        padding: 0;
      }
    }

    @media (min-width: 50em) {
      .back-link {
        display: block;
        align-self: flex-start;
      }

      .details {
        flex-direction: row;
        gap: 2.5rem;
      }

      .content :global(blockquote) {
        font-size: var(--text-3xl);
      }
    }
  </style>
</BaseLayout>
